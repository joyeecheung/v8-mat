#!/usr/bin/env node
'use strict';

const HeapSnapshotAnalyzer = require('../index');
const fs = require('fs');

const file = process.argv[2];

if (!file) {
  console.error(`Usage: ${process.argv[0]} ${process.argv[1]} path/to.heapsnapshot`);
  process.exit(1);
}

function toStderr(...args) {
  console.error(...args);
}

function toStdout(...args) {
  console.log(...args);
}

const noop = () => {};

function displayNode(node) {
  console.log('Name         :', node.name());
  console.log('Class Name   :', node.className());
  console.log('Edges Count  :', node.edgesCount());
  console.log('Retained Size:', node.retainedSize());
  console.log('Self Size    :', node.selfSize());
  console.log('ID           :', node.id());
}

function showResults(analyzer) {
  const snapshot = analyzer.snapshot;
  console.log('Total Heap Size: ', snapshot.totalSize);
  const suspects = analyzer.analyze();
  for (const record of suspects) {
    const { suspect, accumulationPoint } = record;
    console.log(`=============== Suspect ========`);
    displayNode(suspect);
    if (accumulationPoint !== null) {
      console.log(`=============== Accumulation Point ========`);
      displayNode(accumulationPoint.object);
      console.log(`=============== Retaining Path ========`);
      record.setLog(toStdout);
      const leakPath = record.getPath();
      record.setLog(noop);
    } else {
      console.log(`No accumulation point`);
    }
  }
}

const stream = fs.createReadStream(file).setEncoding('utf8');
const analyzer = new HeapSnapshotAnalyzer();
analyzer.loadStream(stream, toStderr)
  .then(() => {
    showResults(analyzer);
  }, (err) => {
    console.error(err);
  });
